// Generated by gencpp from file olfaction_msgs/gas_sensor.msg
// DO NOT EDIT!


#ifndef OLFACTION_MSGS_MESSAGE_GAS_SENSOR_H
#define OLFACTION_MSGS_MESSAGE_GAS_SENSOR_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace olfaction_msgs
{
template <class ContainerAllocator>
struct gas_sensor_
{
  typedef gas_sensor_<ContainerAllocator> Type;

  gas_sensor_()
    : header()
    , technology(0)
    , manufacturer(0)
    , mpn(0)
    , raw(0.0)
    , raw_units(0)
    , raw_air(0.0)
    , calib_A(0.0)
    , calib_B(0.0)  {
    }
  gas_sensor_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , technology(0)
    , manufacturer(0)
    , mpn(0)
    , raw(0.0)
    , raw_units(0)
    , raw_air(0.0)
    , calib_A(0.0)
    , calib_B(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _technology_type;
  _technology_type technology;

   typedef uint8_t _manufacturer_type;
  _manufacturer_type manufacturer;

   typedef uint8_t _mpn_type;
  _mpn_type mpn;

   typedef double _raw_type;
  _raw_type raw;

   typedef uint8_t _raw_units_type;
  _raw_units_type raw_units;

   typedef double _raw_air_type;
  _raw_air_type raw_air;

   typedef double _calib_A_type;
  _calib_A_type calib_A;

   typedef double _calib_B_type;
  _calib_B_type calib_B;



  enum {
    TECH_UNKNOWN = 0u,
    TECH_MOX = 1u,
    TECH_AEC = 2u,
    TECH_EQ = 50u,
    TECH_PID = 51u,
    TECH_SAW = 52u,
    TECH_TEMP = 100u,
    TECH_HUMIDITY = 101u,
    TECH_NOT_VALID = 255u,
    MANU_UNKNOWN = 0u,
    MANU_FIGARO = 1u,
    MANU_ALPHASENSE = 2u,
    MANU_SGX = 3u,
    MANU_RAE = 50u,
    MANU_HANWEI = 51u,
    MANU_NOT_VALID = 255u,
    MPN_UNKNOWN = 0u,
    MPN_TGS2620 = 50u,
    MPN_TGS2600 = 51u,
    MPN_TGS2611 = 52u,
    MPN_TGS2610 = 53u,
    MPN_TGS2612 = 54u,
    MPN_MINIRAELITE = 70u,
    MPN_NOT_VALID = 255u,
    UNITS_UNKNOWN = 0u,
    UNITS_VOLT = 1u,
    UNITS_AMP = 2u,
    UNITS_PPM = 3u,
    UNITS_PPB = 4u,
    UNITS_OHM = 5u,
    UNITS_CENTIGRADE = 100u,
    UNITS_RELATIVEHUMIDITY = 101u,
    UNITS_NOT_VALID = 255u,
  };


  typedef boost::shared_ptr< ::olfaction_msgs::gas_sensor_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::olfaction_msgs::gas_sensor_<ContainerAllocator> const> ConstPtr;

}; // struct gas_sensor_

typedef ::olfaction_msgs::gas_sensor_<std::allocator<void> > gas_sensor;

typedef boost::shared_ptr< ::olfaction_msgs::gas_sensor > gas_sensorPtr;
typedef boost::shared_ptr< ::olfaction_msgs::gas_sensor const> gas_sensorConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::olfaction_msgs::gas_sensor_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace olfaction_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'nav_msgs': ['/opt/ros/melodic/share/nav_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'olfaction_msgs': ['/home/bart/CFD_pipeline/catkin_ws/src/olfaction_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::olfaction_msgs::gas_sensor_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::olfaction_msgs::gas_sensor_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::olfaction_msgs::gas_sensor_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f19a4378539410bc0da063e4424de564";
  }

  static const char* value(const ::olfaction_msgs::gas_sensor_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf19a4378539410bcULL;
  static const uint64_t static_value2 = 0x0da063e4424de564ULL;
};

template<class ContainerAllocator>
struct DataType< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "olfaction_msgs/gas_sensor";
  }

  static const char* value(const ::olfaction_msgs::gas_sensor_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Generic gas sensor msg\n"
"\n"
"# TECHNOLOGY -------------------------------------------------------------------\n"
"uint8 TECH_UNKNOWN   = 0\n"
"uint8 TECH_MOX       = 1\n"
"uint8 TECH_AEC       = 2\n"
"uint8 TECH_EQ        = 50\n"
"uint8 TECH_PID       = 51\n"
"uint8 TECH_SAW       = 52\n"
"uint8 TECH_TEMP      = 100\n"
"uint8 TECH_HUMIDITY  = 101\n"
"uint8 TECH_NOT_VALID = 255\n"
"\n"
"\n"
"# MANUFACTURER -----------------------------------------------------------------\n"
"uint8 MANU_UNKNOWN   = 0\n"
"uint8 MANU_FIGARO    = 1\n"
"uint8 MANU_ALPHASENSE= 2\n"
"uint8 MANU_SGX       = 3\n"
"uint8 MANU_RAE       = 50\n"
"uint8 MANU_HANWEI    = 51\n"
"uint8 MANU_NOT_VALID = 255\n"
"\n"
"\n"
"\n"
"# MPN --------------------------------------------------------------------------\n"
"uint8 MPN_UNKNOWN    = 0\n"
"uint8 MPN_TGS2620    = 50\n"
"uint8 MPN_TGS2600    = 51\n"
"uint8 MPN_TGS2611    = 52\n"
"uint8 MPN_TGS2610    = 53\n"
"uint8 MPN_TGS2612    = 54\n"
"uint8 MPN_MINIRAELITE= 70\n"
"uint8 MPN_NOT_VALID  = 255\n"
"\n"
"\n"
"\n"
"# UNITS ------------------------------------------------------------------------\n"
"uint8 UNITS_UNKNOWN          = 0\n"
"uint8 UNITS_VOLT             = 1\n"
"uint8 UNITS_AMP              = 2\n"
"uint8 UNITS_PPM              = 3\n"
"uint8 UNITS_PPB              = 4\n"
"uint8 UNITS_OHM              = 5\n"
"uint8 UNITS_CENTIGRADE       = 100\n"
"uint8 UNITS_RELATIVEHUMIDITY = 101\n"
"uint8 UNITS_NOT_VALID        = 255\n"
"\n"
"\n"
"\n"
"# MESSAGE DEFINITION -----------------------------------------------------------\n"
"\n"
"Header header       # timestamp and frame_id\n"
"\n"
"#Info\n"
"uint8 technology\n"
"uint8 manufacturer\n"
"uint8 mpn\n"
"\n"
"#Measurement\n"
"float64 raw\n"
"uint8 raw_units     # Measurement units (e.g. ppm, volts, ohm)\n"
"float64 raw_air     # Sensor output for clean air\n"
"float64 calib_A     # Calibration constant. Its exact meaning depends on the sensor\n"
"float64 calib_B     # Calibration constant. Its exact meaning depends on the sensor\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::olfaction_msgs::gas_sensor_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.technology);
      stream.next(m.manufacturer);
      stream.next(m.mpn);
      stream.next(m.raw);
      stream.next(m.raw_units);
      stream.next(m.raw_air);
      stream.next(m.calib_A);
      stream.next(m.calib_B);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gas_sensor_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::olfaction_msgs::gas_sensor_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "technology: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.technology);
    s << indent << "manufacturer: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.manufacturer);
    s << indent << "mpn: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mpn);
    s << indent << "raw: ";
    Printer<double>::stream(s, indent + "  ", v.raw);
    s << indent << "raw_units: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.raw_units);
    s << indent << "raw_air: ";
    Printer<double>::stream(s, indent + "  ", v.raw_air);
    s << indent << "calib_A: ";
    Printer<double>::stream(s, indent + "  ", v.calib_A);
    s << indent << "calib_B: ";
    Printer<double>::stream(s, indent + "  ", v.calib_B);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OLFACTION_MSGS_MESSAGE_GAS_SENSOR_H
