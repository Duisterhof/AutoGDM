// Generated by gencpp from file olfaction_msgs/gas_sensor_array.msg
// DO NOT EDIT!


#ifndef OLFACTION_MSGS_MESSAGE_GAS_SENSOR_ARRAY_H
#define OLFACTION_MSGS_MESSAGE_GAS_SENSOR_ARRAY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <olfaction_msgs/gas_sensor.h>

namespace olfaction_msgs
{
template <class ContainerAllocator>
struct gas_sensor_array_
{
  typedef gas_sensor_array_<ContainerAllocator> Type;

  gas_sensor_array_()
    : header()
    , sensors()  {
    }
  gas_sensor_array_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensors(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::olfaction_msgs::gas_sensor_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >::other >  _sensors_type;
  _sensors_type sensors;





  typedef boost::shared_ptr< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> const> ConstPtr;

}; // struct gas_sensor_array_

typedef ::olfaction_msgs::gas_sensor_array_<std::allocator<void> > gas_sensor_array;

typedef boost::shared_ptr< ::olfaction_msgs::gas_sensor_array > gas_sensor_arrayPtr;
typedef boost::shared_ptr< ::olfaction_msgs::gas_sensor_array const> gas_sensor_arrayConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::olfaction_msgs::gas_sensor_array_<ContainerAllocator1> & lhs, const ::olfaction_msgs::gas_sensor_array_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sensors == rhs.sensors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::olfaction_msgs::gas_sensor_array_<ContainerAllocator1> & lhs, const ::olfaction_msgs::gas_sensor_array_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace olfaction_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2f2312a6b81ab41737f07bd20ae43828";
  }

  static const char* value(const ::olfaction_msgs::gas_sensor_array_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2f2312a6b81ab417ULL;
  static const uint64_t static_value2 = 0x37f07bd20ae43828ULL;
};

template<class ContainerAllocator>
struct DataType< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "olfaction_msgs/gas_sensor_array";
  }

  static const char* value(const ::olfaction_msgs::gas_sensor_array_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Generic array of sensors (gas, temp, RH). This is the common msg format for electronic noses.\n"
"\n"
"Header header			# timestamp and frame_id\n"
"gas_sensor[] sensors    # the sensors in the array (see gas_sensor msg)\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: olfaction_msgs/gas_sensor\n"
"# Generic gas sensor msg\n"
"\n"
"# TECHNOLOGY -------------------------------------------------------------------\n"
"uint8 TECH_UNKNOWN   = 0\n"
"uint8 TECH_MOX       = 1\n"
"uint8 TECH_AEC       = 2\n"
"uint8 TECH_EQ        = 50\n"
"uint8 TECH_PID       = 51\n"
"uint8 TECH_SAW       = 52\n"
"uint8 TECH_TEMP      = 100\n"
"uint8 TECH_HUMIDITY  = 101\n"
"uint8 TECH_NOT_VALID = 255\n"
"\n"
"\n"
"# MANUFACTURER -----------------------------------------------------------------\n"
"uint8 MANU_UNKNOWN   = 0\n"
"uint8 MANU_FIGARO    = 1\n"
"uint8 MANU_ALPHASENSE= 2\n"
"uint8 MANU_SGX       = 3\n"
"uint8 MANU_RAE       = 50\n"
"uint8 MANU_HANWEI    = 51\n"
"uint8 MANU_NOT_VALID = 255\n"
"\n"
"\n"
"\n"
"# MPN --------------------------------------------------------------------------\n"
"uint8 MPN_UNKNOWN    = 0\n"
"uint8 MPN_TGS2620    = 50\n"
"uint8 MPN_TGS2600    = 51\n"
"uint8 MPN_TGS2611    = 52\n"
"uint8 MPN_TGS2610    = 53\n"
"uint8 MPN_TGS2612    = 54\n"
"uint8 MPN_MINIRAELITE= 70\n"
"uint8 MPN_NOT_VALID  = 255\n"
"\n"
"\n"
"\n"
"# UNITS ------------------------------------------------------------------------\n"
"uint8 UNITS_UNKNOWN          = 0\n"
"uint8 UNITS_VOLT             = 1\n"
"uint8 UNITS_AMP              = 2\n"
"uint8 UNITS_PPM              = 3\n"
"uint8 UNITS_PPB              = 4\n"
"uint8 UNITS_OHM              = 5\n"
"uint8 UNITS_CENTIGRADE       = 100\n"
"uint8 UNITS_RELATIVEHUMIDITY = 101\n"
"uint8 UNITS_NOT_VALID        = 255\n"
"\n"
"\n"
"\n"
"# MESSAGE DEFINITION -----------------------------------------------------------\n"
"\n"
"Header header       # timestamp and frame_id\n"
"\n"
"#Info\n"
"uint8 technology\n"
"uint8 manufacturer\n"
"uint8 mpn\n"
"\n"
"#Measurement\n"
"float64 raw\n"
"uint8 raw_units     # Measurement units (e.g. ppm, volts, ohm)\n"
"float64 raw_air     # Sensor output for clean air\n"
"float64 calib_A     # Calibration constant. Its exact meaning depends on the sensor\n"
"float64 calib_B     # Calibration constant. Its exact meaning depends on the sensor\n"
"\n"
;
  }

  static const char* value(const ::olfaction_msgs::gas_sensor_array_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct gas_sensor_array_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::olfaction_msgs::gas_sensor_array_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::olfaction_msgs::gas_sensor_array_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensors[]" << std::endl;
    for (size_t i = 0; i < v.sensors.size(); ++i)
    {
      s << indent << "  sensors[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::olfaction_msgs::gas_sensor_<ContainerAllocator> >::stream(s, indent + "    ", v.sensors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // OLFACTION_MSGS_MESSAGE_GAS_SENSOR_ARRAY_H
